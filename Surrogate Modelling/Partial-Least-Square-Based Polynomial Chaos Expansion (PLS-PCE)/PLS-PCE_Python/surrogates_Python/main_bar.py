"""
--------------------------------------------------------------------------
Test Polynomial-Chaos-Expansion-Driven Partial Least Squares algorithm (PCE-PLS) on 1D bar example with KLE-discretized random field
--------------------------------------------------------------------------
Created by:
Fong-Lin Wu (fonglin.wu@tum.de)
Max Ehre (max.ehre@tum.de)
Technische Universitat Munchen
www.era.bgu.tum.de
---------------------------------------------------------------------------
Version: 
* 2019-08 Transition from Matlab
--------------------------------------------------------------------------
Input:
* V : Design input generated by Latin-Hypercube sampling for training
* Ve: Design input generated by Latin-Hypercube sampling for evaluation
--------------------------------------------------------------------------
Output:
* Y : Output from Finite-Element-Method
* Ye: Output from surrogate model (PCE-PLS)
--------------------------------------------------------------------------
Based on:

--------------------------------------------------------------------------

import time
print("\n------------------Programm begins------------------\n")

import numpy as np
from scipy.stats import norm
# normal distribution from SciPy
from pyDOE import lhs
# The pyDOE package is designed to help construct appropriate experimental designs.
# https://pythonhosted.org/pyDOE/index.html

# Make sure having these scripts under the same workspace
from bar_model import bar_model          # Finite-Element model
from pls_pce_R_combi import pls_pce_R    # PCE-driven PLS algorithm

## Parameters
p_pls = 5          # maximum polynomial order of PLS-PCE
d_pls = 5          # maximum number of components (directions)
d     = 100        # original problem dimension 
ned   = int(1000)  # number of training points to learn PLS-PCE model
neval = int(100)   # number of points to estimate generalization error
Y     = []         # initialize training list
Ye    = []         # initialize evaluation lis

## Create training data
# generate inputs by Latin Hyper Cube sampling with minimized correlation
V = norm.ppf( lhs(d, samples=ned, criterion='corr') )
print("(Automatically generated by Latin Hyper Cube sampling)\n")

print("---------Generating training sets---------")
start = time.time()

# Generate FE model output for training
for i in range(ned):
    Y.append ( np.array ( bar_model( V[i,:].T ) ) )
Y = np.array(Y).reshape(ned,-1)

end = time.time()
print('Time elapsed: %f' % (end - start),'seconds.' )
print("----------Taining sets generated----------\n")
 
## Training
print("---------Training begins---------")
start = time.time()

# train PLS-PCE surrogate model by FE model output
[fpls, Ypls,R_err, d_red, pfinal] = pls_pce_R(V, Y, d_pls, p_pls)
end = time.time()

print('Time elapsed: %f' % (end - start),'seconds.' )
print("----------Training ends----------\n")

## Create evaluation data
# generate inputs by Latin Hyper Cube sampling with minimized correlation
Ve = norm.ppf( lhs(d, samples=neval, criterion='corr' ) )
print("(Automatically generated by Latin Hyper Cube sampling)\n")

print("---------Generating evaluation sets---------")
start = time.time()

# generate FE model output for evaluation
for i in range(neval): 
    Ye.append( np.array( bar_model( Ve[i,:].T ) ) )
Ye = np.array(Ye).reshape(neval,-1)

end = time.time()
print('Time elapsed: %f' % (end - start),'seconds.' )
print("---------Evaluation sets generated----------\n")

## Prediction
start = time.time()
print("---------Surrogate model begins---------")

# predict new data using PLS-PCE surrogate model 
Ye_pls = fpls(Ve).reshape(neval,-1)

end = time.time()
print('Time elapsed: %f' % (end - start),'seconds.' )
print("----------Surrogate model ends----------\n")

# estimate generalisation error
err_pls = np.mean(np.power((Ye_pls - Ye), 2)) / np.var(Ye)
print('Estimated generalisation error: %f' % (err_pls) )

print("\n-------------------Programm ends-------------------\n")